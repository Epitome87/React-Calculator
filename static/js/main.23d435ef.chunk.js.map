{"version":3,"sources":["DigitButton.jsx","OperationButton.jsx","Calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","DELETE_DIGIT","CLEAR","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","slice","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","Calculator","useReducer","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23d435ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ACTIONS } from \"./Calculator\";\r\n\r\nconst DigitButton = ({dispatch, digit}) => {\r\n    return <button onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit }})}>{digit}</button>\r\n}\r\n\r\nexport default DigitButton;","import { ACTIONS } from \"./Calculator\";\r\n\r\nconst OperationButton = ({ dispatch, operation }) => {\r\n    return (\r\n        <button onClick={() => dispatch( { type: ACTIONS.CHOOSE_OPERATION , payload: { operation } })}>\r\n            {operation}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default OperationButton;","import { useReducer } from \"react\";\r\nimport DigitButton from \"./DigitButton\";\r\nimport OperationButton from \"./OperationButton\";\r\nimport \"./Calculator.css\";\r\n\r\nexport const ACTIONS = {\r\n  ADD_DIGIT: \"add-digit\",\r\n  DELETE_DIGIT: \"delete-digit\",\r\n  CLEAR: \"clear\",\r\n  CHOOSE_OPERATION: \"choose-operation\",\r\n  EVALUATE: \"evaluate\",\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite)\r\n        return {\r\n          ...state,\r\n          currentOperand: payload.digit,\r\n          overwrite: false,\r\n        };\r\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\r\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\"))\r\n        return state;\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n      };\r\n\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      // No previous or current operands\r\n      if (state.currentOperand === null && state.previousOperand == null)\r\n        return state;\r\n\r\n      // Override previous operation\r\n      if (state.currentOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n        };\r\n      }\r\n      // No previous operand, but is a current one\r\n      if (state.previousOperand == null)\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n          previousOperand: state.currentOperand,\r\n          currentOperand: null,\r\n        };\r\n\r\n      return {\r\n        ...state,\r\n        previousOperand: evaluate(state),\r\n        operation: payload.operation,\r\n        currentOperand: null,\r\n      };\r\n\r\n    case ACTIONS.EVALUATE:\r\n      // Do we have all 3 relevant pieces of state required to evaluate?\r\n      if (\r\n        state.operation == null ||\r\n        state.currentOperand == null ||\r\n        state.previousOperand == null\r\n      )\r\n        return state;\r\n\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        previousOperand: null,\r\n        currentOperand: evaluate(state),\r\n        operation: null,\r\n      };\r\n\r\n    case ACTIONS.DELETE_DIGIT:\r\n      // Did we just evaluate? Delete entire currentOperand\r\n      if (state.overwrite)\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: null,\r\n        };\r\n\r\n      // If no currente operand, nothing to delete!\r\n      if (state.currentOperand == null) return state;\r\n\r\n      // Only 1 digit left? Set currentOperand to null rather than making it an empty string\r\n      if (state.currentOperand === 1)\r\n        return {\r\n          ...state,\r\n          currentOperand: null,\r\n        };\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: state.currentOperand.slice(0, -1),\r\n      };\r\n\r\n    case ACTIONS.CLEAR:\r\n      // Return empty state\r\n      return {};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction evaluate({ currentOperand, previousOperand, operation }) {\r\n  const prev = parseFloat(previousOperand);\r\n  const current = parseFloat(currentOperand);\r\n\r\n  if (isNaN(prev) || isNaN(current)) return \"\";\r\n\r\n  let computation = \"\";\r\n\r\n  switch (operation) {\r\n    case \"+\":\r\n      computation = prev + current;\r\n      break;\r\n    case \"-\":\r\n      computation = prev - current;\r\n      break;\r\n    case \"/\":\r\n      computation = prev / current;\r\n      break;\r\n    case \"*\":\r\n      computation = prev * current;\r\n      break;\r\n    default:\r\n      return computation.toString();\r\n  }\r\n\r\n  return computation.toString();\r\n}\r\n\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\r\n  maximumFractionDigits: 0,\r\n});\r\n\r\nfunction formatOperand(operand) {\r\n  if (operand == null) return;\r\n  const [integer, decimal] = operand.split(\".\");\r\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\r\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\r\n}\r\n\r\nconst Calculator = () => {\r\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\r\n    reducer,\r\n    {}\r\n  );\r\n\r\n  return (\r\n    <div className=\"calculator-grid\">\r\n      <div className=\"output\">\r\n        <div className=\"previous-operand\">\r\n          {formatOperand(previousOperand)} {operation}\r\n        </div>\r\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\r\n      </div>\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\r\n      >\r\n        AC\r\n      </button>\r\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\r\n        DEL\r\n      </button>\r\n      <OperationButton operation=\"/\" dispatch={dispatch}>\r\n        รท\r\n      </OperationButton>\r\n      <DigitButton digit=\"1\" dispatch={dispatch}>\r\n        1\r\n      </DigitButton>\r\n      <DigitButton digit=\"2\" dispatch={dispatch}>\r\n        2\r\n      </DigitButton>\r\n      <DigitButton digit=\"3\" dispatch={dispatch}>\r\n        3\r\n      </DigitButton>\r\n      <OperationButton operation=\"*\" dispatch={dispatch}>\r\n        *\r\n      </OperationButton>\r\n      <DigitButton digit=\"4\" dispatch={dispatch}>\r\n        4\r\n      </DigitButton>\r\n      <DigitButton digit=\"5\" dispatch={dispatch}>\r\n        5\r\n      </DigitButton>\r\n      <DigitButton digit=\"6\" dispatch={dispatch}>\r\n        6\r\n      </DigitButton>\r\n      <OperationButton operation=\"+\" dispatch={dispatch}>\r\n        +\r\n      </OperationButton>\r\n      <DigitButton digit=\"7\" dispatch={dispatch}>\r\n        7\r\n      </DigitButton>\r\n      <DigitButton digit=\"8\" dispatch={dispatch}>\r\n        8\r\n      </DigitButton>\r\n      <DigitButton digit=\"9\" dispatch={dispatch}>\r\n        9\r\n      </DigitButton>\r\n      <OperationButton operation=\"-\" dispatch={dispatch}>\r\n        -\r\n      </OperationButton>\r\n      <DigitButton digit=\".\" dispatch={dispatch}>\r\n        .\r\n      </DigitButton>\r\n      <DigitButton digit=\"0\" dispatch={dispatch}>\r\n        0\r\n      </DigitButton>\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => {\r\n          dispatch({ type: ACTIONS.EVALUATE });\r\n        }}\r\n      >\r\n        =\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import Calculator from './Calculator';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Calculator />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}